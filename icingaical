#!/usr/bin/perl -w
#
# Reads downtimes from a nagios status.dat and creates an ical file out of it
#
# Written by Darko Krizic <darko.krizic@prodyna.com>

use 5.010;
use strict;
#use warnings;
#use feature qw(switch);
use POSIX;

# ###################
# configuration start
# ###################

# process host down
my $process_host_down = 1;

# process service down
my $process_service_down = 1;

# process host downtimes
my $process_host_downtimes = 1;

# process service downtimes
my $process_service_downtimes = 1;

# The status.dat written by icinga 
my $status = "/var/lib/icinga/status.dat";

# The ics file to be written
my $icalendar = "/var/www/downtimes.ics";

# ###################
# configuration end
# ###################

sub host_down($) {
	my $info = shift;
	return unless $process_host_down;
	return unless $$info{'current_state'};
	print ICAL "BEGIN:VEVENT\n";
	print ICAL "DTSTART:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'last_state_change'}))."\n";
	print ICAL "DTEND:".strftime("%Y%m%dT%H%M%SZ",gmtime(time() + 3600))."\n"; # now + 1h
	print ICAL "SUMMARY:HD: $$info{'host_name'}\n";
	print ICAL "DESCRIPTION: Host down: $$info{'plugin_output'}\n";
	print ICAL "END:VEVENT\n";
}

sub service_down($) {
	my $info = shift;
	return unless $process_service_down;
	return unless $$info{'current_state'} == 2;
	print ICAL "BEGIN:VEVENT\n";
	print ICAL "DTSTART:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'last_state_change'}))."\n";
	print ICAL "DTEND:".strftime("%Y%m%dT%H%M%SZ",gmtime(time() + 3600))."\n"; # now + 1h
	printf ICAL "SUMMARY:SD%s: $$info{'service_description'} on $$info{'host_name'} down\n", $$info{'problem_has_been_acknowledged'} == 1 ? "/ACK" : "";
	printf ICAL "DESCRIPTION:Service down: $$info{'plugin_output'}%s\n", $$info{'problem_has_been_acknowledged'} == 1 ? ", acknowledged" : "";
	print ICAL "END:VEVENT\n";
}

sub host_downtime($) {
	my $info = shift;
	return unless $process_host_downtimes;
	print ICAL "BEGIN:VEVENT\n";
	print ICAL "DTSTART:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'start_time'}))."\n";
	print ICAL "DTEND:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'end_time'}))."\n";
	print ICAL "SUMMARY:HSD: $$info{'host_name'}\n";
	print ICAL "DESCRIPTION:Host Scheduled Downtime: $$info{'comment'} ($$info{'author'})\n";
	print ICAL "END:VEVENT\n";
}

sub service_downtime($) {
	my $info = shift;
	return unless $process_service_downtimes;
	print ICAL "BEGIN:VEVENT\n";
	print ICAL "DTSTART:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'start_time'}))."\n";
	print ICAL "DTEND:".strftime("%Y%m%dT%H%M%SZ",gmtime($$info{'end_time'}))."\n";
	print ICAL "SUMMARY:SSD: $$info{'service_description'}\n";
	print ICAL "DESCRIPTION:Service Scheduled Downtime: $$info{'comment'} ($$info{'author'})\n";
	print ICAL "END:VEVENT\n";
}

# do not change anything down here
my %info = ();
my $debug = 1;
my $insection = 0;
my $type;

open(ICAL, ">$icalendar");
print ICAL "BEGIN:VCALENDAR\n";
print ICAL "VERSION:2.0\n";
print ICAL "PRODID:-//hacksw/handcal//NONSGML v1.0//EN\n";
open(STATUS,"<$status");
while(my $line = <STATUS>) {
	chomp $line;
	$line =~ s/^\s+//; # trim start
	$line =~ s/\s+$//; # trom end
	next unless $line; # ignore empty lines
	if( $line =~ /\{$/ ) {
		# section start
		$insection = 1;
		%info = ();
		$line =~ s/{//;	# remove {
		$line =~ s/^\s+//; # trim start
		$line =~ s/\s+$//; # trom end
		$type = $line;
		next;
	}
	if( $line eq "}" and $insection ) {
		# optional debug
		if( $debug ) {
			print "\ntype=$type\n";
			foreach my $key (keys %info) {
				print "$key=$info{$key}\n";
			}	
		}

		given( $type ) {
			when(/hoststatus/) { 
				host_down(\%info);
			}
			when('servicestatus') { 
				service_down(\%info);
			}
			when('hostdowntime') { 
				host_downtime(\%info);
			}
			when('servicedowntime') {
				service_downtime(\%info);
			}
		}

		undef $type;
		%info = ();
		next;
	}
	my ($key,$value) = split (/=/,$line);	
	$info{$key} = $value;
}

close(STATUS);
print ICAL "END:VCALENDAR\n";
close(ICAL);

0;
